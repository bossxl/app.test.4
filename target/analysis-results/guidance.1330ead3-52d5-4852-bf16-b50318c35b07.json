{
  "id": "1330ead3-52d5-4852-bf16-b50318c35b07",
  "trigger": "679abe74-6d06-4cbe-b439-292d32065569",
  "category": "ROUTE",
  "event": {
    "boundParams": [
      "SC_NON_AUTHORITATIVE_INFORMATION",
      "SC_METHOD_NOT_ALLOWED",
      "SC_MOVED_TEMPORARILY",
      "SC_NOT_MODIFIED",
      "SC_NOT_FOUND",
      "SC_GATEWAY_TIMEOUT",
      "lock",
      "SC_NOT_ACCEPTABLE",
      "SC_OK",
      "BASIC_AUTH",
      "SC_EXPECTATION_FAILED",
      "SC_REQUESTED_RANGE_NOT_SATISFIABLE",
      "SC_TEMPORARY_REDIRECT",
      "SC_LENGTH_REQUIRED",
      "SC_BAD_GATEWAY",
      "WRITE_BUFFER_SIZE",
      "SC_REQUEST_URI_TOO_LONG",
      "SC_CONTINUE",
      "SC_HTTP_VERSION_NOT_SUPPORTED",
      "SC_MOVED_PERMANENTLY",
      "SC_SWITCHING_PROTOCOLS",
      "SC_BAD_REQUEST",
      "MAX_SKIP_BUFFER_SIZE",
      "SC_CONFLICT",
      "CLIENT_CERT_AUTH",
      "SC_CREATED",
      "SC_MULTIPLE_CHOICES",
      "maxSkipBufferSize",
      "SC_FORBIDDEN",
      "SC_NO_CONTENT",
      "SC_REQUEST_ENTITY_TOO_LARGE",
      "SC_PARTIAL_CONTENT",
      "writeBuffer",
      "SC_RESET_CONTENT",
      "SC_ACCEPTED",
      "SC_REQUEST_TIMEOUT",
      "SC_NOT_IMPLEMENTED",
      "SC_UNSUPPORTED_MEDIA_TYPE",
      "SC_USE_PROXY",
      "SC_PROXY_AUTHENTICATION_REQUIRED",
      "SC_UNAUTHORIZED",
      "SC_FOUND",
      "SC_PAYMENT_REQUIRED",
      "DIGEST_AUTH",
      "skipBuffer",
      "FORM_AUTH",
      "SC_INTERNAL_SERVER_ERROR",
      "SC_SEE_OTHER",
      "SC_SERVICE_UNAVAILABLE",
      "SC_GONE",
      "SC_PRECONDITION_FAILED"
    ],
    "allowedParams": [],
    "disallowedParams": [],
    "missingParams": [],
    "initBinder": false,
    "controllerclass": "StandardArgumentsController",
    "requestHandlerSignatures": [
      "session(HttpSession session)",
      "requestReader(Reader requestBodyReader)",
      "availableStandardResponseArguments(OutputStream os)",
      "response(HttpServletResponse response)",
      "availableStandardResponseArguments(Writer responseWriter)",
      "requestReader(InputStream requestBodyIs)",
      "standardRequestArgs(HttpServletRequest request,Principal user,Locale locale)"
    ],
    "category": "ROUTE",
    "id": "679abe74-6d06-4cbe-b439-292d32065569"
  },
  "evidence": "# Create a Spring @InitBinder Method\n\nOur analysis determined that the `@InitBinder` method for `StandardArgumentsController` was not present, resulting in the ability for\nparameters passed on the Request to the `@RequestHandler` to override parameters that may not otherwise be exposed. We\nhave analyzed the the code and found the following parameters to be exposed to the request currently through Spring\u0027s\nauto-binding:\n\n    * SC_NON_AUTHORITATIVE_INFORMATION\n    * SC_METHOD_NOT_ALLOWED\n    * SC_MOVED_TEMPORARILY\n    * SC_NOT_MODIFIED\n    * SC_NOT_FOUND\n    * SC_GATEWAY_TIMEOUT\n    * lock\n    * SC_NOT_ACCEPTABLE\n    * SC_OK\n    * BASIC_AUTH\n    * SC_EXPECTATION_FAILED\n    * SC_REQUESTED_RANGE_NOT_SATISFIABLE\n    * SC_TEMPORARY_REDIRECT\n    * SC_LENGTH_REQUIRED\n    * SC_BAD_GATEWAY\n    * WRITE_BUFFER_SIZE\n    * SC_REQUEST_URI_TOO_LONG\n    * SC_CONTINUE\n    * SC_HTTP_VERSION_NOT_SUPPORTED\n    * SC_MOVED_PERMANENTLY\n    * SC_SWITCHING_PROTOCOLS\n    * SC_BAD_REQUEST\n    * MAX_SKIP_BUFFER_SIZE\n    * SC_CONFLICT\n    * CLIENT_CERT_AUTH\n    * SC_CREATED\n    * SC_MULTIPLE_CHOICES\n    * maxSkipBufferSize\n    * SC_FORBIDDEN\n    * SC_NO_CONTENT\n    * SC_REQUEST_ENTITY_TOO_LARGE\n    * SC_PARTIAL_CONTENT\n    * writeBuffer\n    * SC_RESET_CONTENT\n    * SC_ACCEPTED\n    * SC_REQUEST_TIMEOUT\n    * SC_NOT_IMPLEMENTED\n    * SC_UNSUPPORTED_MEDIA_TYPE\n    * SC_USE_PROXY\n    * SC_PROXY_AUTHENTICATION_REQUIRED\n    * SC_UNAUTHORIZED\n    * SC_FOUND\n    * SC_PAYMENT_REQUIRED\n    * DIGEST_AUTH\n    * skipBuffer\n    * FORM_AUTH\n    * SC_INTERNAL_SERVER_ERROR\n    * SC_SEE_OTHER\n    * SC_SERVICE_UNAVAILABLE\n    * SC_GONE\n    * SC_PRECONDITION_FAILED\n\nFor additional context, we discovered the following `@RequestHandler` methods in this controller that accept parameters\nfrom the request.\n\n    * `session(HttpSession session)`\n    * `requestReader(Reader requestBodyReader)`\n    * `availableStandardResponseArguments(OutputStream os)`\n    * `response(HttpServletResponse response)`\n    * `availableStandardResponseArguments(Writer responseWriter)`\n    * `requestReader(InputStream requestBodyIs)`\n    * `standardRequestArgs(HttpServletRequest request,Principal user,Locale locale)`\n\nUse our sandbox below to fine-tune which parameters you would like to explicitly allow to be set. Anything explicitly\npassed to the `setAllowedFields` method will be _whitelisted_ for inclusion while any parameter that is excluded will\nbe considered a read-only attribute and the value will not be set when Spring performs auto-binding.\n",
  "advice": [
    {
      "sandboxModel": {
        "boundParams": [
          "SC_NON_AUTHORITATIVE_INFORMATION",
          "SC_METHOD_NOT_ALLOWED",
          "SC_MOVED_TEMPORARILY",
          "SC_NOT_MODIFIED",
          "SC_NOT_FOUND",
          "SC_GATEWAY_TIMEOUT",
          "lock",
          "SC_NOT_ACCEPTABLE",
          "SC_OK",
          "BASIC_AUTH",
          "SC_EXPECTATION_FAILED",
          "SC_REQUESTED_RANGE_NOT_SATISFIABLE",
          "SC_TEMPORARY_REDIRECT",
          "SC_LENGTH_REQUIRED",
          "SC_BAD_GATEWAY",
          "WRITE_BUFFER_SIZE",
          "SC_REQUEST_URI_TOO_LONG",
          "SC_CONTINUE",
          "SC_HTTP_VERSION_NOT_SUPPORTED",
          "SC_MOVED_PERMANENTLY",
          "SC_SWITCHING_PROTOCOLS",
          "SC_BAD_REQUEST",
          "MAX_SKIP_BUFFER_SIZE",
          "SC_CONFLICT",
          "CLIENT_CERT_AUTH",
          "SC_CREATED",
          "SC_MULTIPLE_CHOICES",
          "maxSkipBufferSize",
          "SC_FORBIDDEN",
          "SC_NO_CONTENT",
          "SC_REQUEST_ENTITY_TOO_LARGE",
          "SC_PARTIAL_CONTENT",
          "writeBuffer",
          "SC_RESET_CONTENT",
          "SC_ACCEPTED",
          "SC_REQUEST_TIMEOUT",
          "SC_NOT_IMPLEMENTED",
          "SC_UNSUPPORTED_MEDIA_TYPE",
          "SC_USE_PROXY",
          "SC_PROXY_AUTHENTICATION_REQUIRED",
          "SC_UNAUTHORIZED",
          "SC_FOUND",
          "SC_PAYMENT_REQUIRED",
          "DIGEST_AUTH",
          "skipBuffer",
          "FORM_AUTH",
          "SC_INTERNAL_SERVER_ERROR",
          "SC_SEE_OTHER",
          "SC_SERVICE_UNAVAILABLE",
          "SC_GONE",
          "SC_PRECONDITION_FAILED"
        ]
      },
      "file": "/Users/cschmidt/IdeaProjects/lofting.poc.java.analyzer/test/app.test.4/src/main/java/org/springframework/samples/mvc/data/standard/StandardArgumentsController.java",
      "content": "\n\r    /**\n\r     * Added by Codiscope {{product}} on {{date}}\n\r     *\n\r     * @GuidanceID({{guidance.id}})\n\r     *\n\r     * Whitelist the properties that can be auto-bound to parameters and fields\n\r     **************************************************************************/\n\r    @InitBinder\n\r    public void initBinder(org.springframework.validation.DataBinder dataBinder) {\n\r        dataBinder.setAllowedFields({{#allowedFields}}\"{{field}}\"{{^last}},{{/last}}{{/allowedFields}});\n\r    }\n\r",
      "type": "SandboxAdvice"
    }
  ]
}