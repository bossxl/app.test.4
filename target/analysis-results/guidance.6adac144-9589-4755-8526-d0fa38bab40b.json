{
  "id": "6adac144-9589-4755-8526-d0fa38bab40b",
  "trigger": "f04f4685-a650-40b7-962f-70f67e06728a",
  "category": "ROUTE",
  "event": {
    "boundParams": [
      "headers",
      "foo",
      "param3",
      "body",
      "EMPTY",
      "param1",
      "param2"
    ],
    "allowedParams": [],
    "disallowedParams": [],
    "missingParams": [],
    "initBinder": false,
    "controllerclass": "RequestDataController",
    "requestHandlerSignatures": [
      "withCookie(@CookieValue()String openid_provider)",
      "withPathVariable(@PathVariable()String var)",
      "withParamGroup(JavaBean bean)",
      "withBody(@RequestBody()String body)",
      "withEntity(HttpEntity\u003cString\u003e entity)",
      "withMatrixVariable(@PathVariable()String path,@MatrixVariable()String foo)",
      "withMatrixVariablesMultiple(@PathVariable()String path1,@MatrixVariable(value \u003d \"foo\", pathVar \u003d \"path1\")String foo1,@PathVariable()String path2,@MatrixVariable(value \u003d \"foo\", pathVar \u003d \"path2\")String foo2)",
      "withHeader(@RequestHeader()String Accept)",
      "withParam(@RequestParam()String foo)"
    ],
    "category": "ROUTE",
    "id": "f04f4685-a650-40b7-962f-70f67e06728a"
  },
  "evidence": "# Create a Spring @InitBinder Method\n\nOur analysis determined that the `@InitBinder` method for `RequestDataController` was not present, resulting in the ability for\nparameters passed on the Request to the `@RequestHandler` to override parameters that may not otherwise be exposed. We\nhave analyzed the the code and found the following parameters to be exposed to the request currently through Spring\u0027s\nauto-binding:\n\n    * headers\n    * foo\n    * param3\n    * body\n    * EMPTY\n    * param1\n    * param2\n\nFor additional context, we discovered the following `@RequestHandler` methods in this controller that accept parameters\nfrom the request.\n\n    * `withCookie(@CookieValue()String openid_provider)`\n    * `withPathVariable(@PathVariable()String var)`\n    * `withParamGroup(JavaBean bean)`\n    * `withBody(@RequestBody()String body)`\n    * `withEntity(HttpEntity\u0026lt;String\u0026gt; entity)`\n    * `withMatrixVariable(@PathVariable()String path,@MatrixVariable()String foo)`\n    * `withMatrixVariablesMultiple(@PathVariable()String path1,@MatrixVariable(value \u003d \u0026quot;foo\u0026quot;, pathVar \u003d \u0026quot;path1\u0026quot;)String foo1,@PathVariable()String path2,@MatrixVariable(value \u003d \u0026quot;foo\u0026quot;, pathVar \u003d \u0026quot;path2\u0026quot;)String foo2)`\n    * `withHeader(@RequestHeader()String Accept)`\n    * `withParam(@RequestParam()String foo)`\n\nUse our sandbox below to fine-tune which parameters you would like to explicitly allow to be set. Anything explicitly\npassed to the `setAllowedFields` method will be _whitelisted_ for inclusion while any parameter that is excluded will\nbe considered a read-only attribute and the value will not be set when Spring performs auto-binding.\n",
  "advice": [
    {
      "sandboxModel": {
        "boundParams": [
          "headers",
          "foo",
          "param3",
          "body",
          "EMPTY",
          "param1",
          "param2"
        ]
      },
      "file": "/Users/cschmidt/IdeaProjects/lofting.poc.java.analyzer/test/app.test.4/src/main/java/org/springframework/samples/mvc/data/RequestDataController.java",
      "content": "\n\r    /**\n\r     * Added by Codiscope {{product}} on {{date}}\n\r     *\n\r     * @GuidanceID({{guidance.id}})\n\r     *\n\r     * Whitelist the properties that can be auto-bound to parameters and fields\n\r     **************************************************************************/\n\r    @InitBinder\n\r    public void initBinder(org.springframework.validation.DataBinder dataBinder) {\n\r        dataBinder.setAllowedFields({{#allowedFields}}\"{{field}}\"{{^last}},{{/last}}{{/allowedFields}});\n\r    }\n\r",
      "type": "SandboxAdvice"
    }
  ]
}